/**
 * ÈÉ®ÁΩ≤ ConditionalTokens ÂêàÁ∫¶Âà∞Êú¨Âú∞ Hardhat ÁΩëÁªú
 */

const hre = require("hardhat");

async function main() {
  console.log("\nüöÄ ÂºÄÂßãÈÉ®ÁΩ≤ ConditionalTokens ÂêàÁ∫¶Âà∞Êú¨Âú∞ÁΩëÁªú...\n");

  // Ëé∑ÂèñÈÉ®ÁΩ≤ËÄÖË¥¶Êà∑
  const [deployer] = await hre.ethers.getSigners();
  console.log("üìù ÈÉ®ÁΩ≤Ë¥¶Êà∑:", deployer.address);
  
  const balance = await deployer.getBalance();
  console.log("üí∞ Ë¥¶Êà∑‰ΩôÈ¢ù:", hre.ethers.utils.formatEther(balance), "ETH\n");

  // ÈÉ®ÁΩ≤ÂêàÁ∫¶
  console.log("üì¶ ÈÉ®ÁΩ≤ÂêàÁ∫¶‰∏≠...");
  const ConditionalTokens = await hre.ethers.getContractFactory("ConditionalTokens");
  const conditionalTokens = await ConditionalTokens.deploy();
  await conditionalTokens.deployed();

  console.log("\n‚úÖ ÈÉ®ÁΩ≤ÊàêÂäü!");
  console.log("‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ");
  console.log("üìç ÂêàÁ∫¶Âú∞ÂùÄ:", conditionalTokens.address);
  console.log("üåê ÁΩëÁªú:", hre.network.name);
  console.log("‚õìÔ∏è  Chain ID:", hre.network.config.chainId);
  console.log("‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n");

  // ÊµãËØïÂêàÁ∫¶
  console.log("üß™ ÊµãËØïÂêàÁ∫¶ÂäüËÉΩ...\n");
  
  const questionId = hre.ethers.utils.formatBytes32String("test-market");
  const outcomeSlotCount = 2;
  
  console.log("1Ô∏è‚É£ ÂàõÂª∫ÊµãËØïÂ∏ÇÂú∫...");
  const tx = await conditionalTokens.prepareCondition(
    deployer.address,
    questionId,
    outcomeSlotCount
  );
  
  await tx.wait();
  console.log("   ‚úÖ Â∏ÇÂú∫ÂàõÂª∫ÊàêÂäü");
  
  const conditionId = await conditionalTokens.getConditionId(
    deployer.address,
    questionId,
    outcomeSlotCount
  );
  
  console.log("   üéØ Condition ID:", conditionId);
  
  const slotCount = await conditionalTokens.getOutcomeSlotCount(conditionId);
  console.log("   üìä ÁªìÊûúÊï∞Èáè:", slotCount.toString());
  
  console.log("\n‚úÖ ÂêàÁ∫¶ÊµãËØïÈÄöËøá!\n");
  
  // ‰øùÂ≠òÈÉ®ÁΩ≤‰ø°ÊÅØ
  const fs = require('fs');
  const deployInfo = {
    network: hre.network.name,
    chainId: hre.network.config.chainId,
    contractAddress: conditionalTokens.address,
    deployer: deployer.address,
    deployedAt: new Date().toISOString()
  };
  
  fs.writeFileSync(
    'deployment-local.json',
    JSON.stringify(deployInfo, null, 2)
  );
  
  console.log("üíæ ÈÉ®ÁΩ≤‰ø°ÊÅØÂ∑≤‰øùÂ≠òÂà∞ deployment-local.json\n");
  console.log("‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ");
  console.log("üéØ ‰∏ã‰∏ÄÊ≠•:");
  console.log("1. Âú® MetaMask ‰∏≠Ê∑ªÂä† Hardhat Êú¨Âú∞ÁΩëÁªú");
  console.log("2. ÂØºÂÖ•ÊµãËØïË¥¶Êà∑ÁßÅÈí•");
  console.log("3. Êõ¥Êñ∞ÂâçÁ´ØÈÖçÁΩÆ‰ΩøÁî®Ê≠§ÂêàÁ∫¶Âú∞ÂùÄ");
  console.log("4. ËÆøÈóÆ http://localhost:3004/test-contract");
  console.log("‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n");
}

main()
  .then(() => process.exit(0))
  .catch((error) => {
    console.error("‚ùå ÈÉ®ÁΩ≤Â§±Ë¥•:", error);
    process.exit(1);
  });


















