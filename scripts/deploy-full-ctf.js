/**
 * ÈÉ®ÁΩ≤ÂÆåÊï¥Áâà ConditionalTokens + CTFExchange
 * Âü∫‰∫é Polymarket ÂÆòÊñπÊû∂ÊûÑ
 */

const hre = require("hardhat");
const { ethers } = require("hardhat");
const fs = require("fs");
const path = require("path");

async function main() {
  console.log("\n" + "=".repeat(70));
  console.log("üöÄ ÈÉ®ÁΩ≤ÂÆåÊï¥Áâà Polymarket ËÆ¢ÂçïËñÑÁ≥ªÁªü");
  console.log("=".repeat(70));

  const [deployer] = await ethers.getSigners();
  const balance = await deployer.getBalance();

  console.log("\nüìç ÈÉ®ÁΩ≤Ë¥¶Êà∑:", deployer.address);
  console.log("üí∞ Ë¥¶Êà∑‰ΩôÈ¢ù:", ethers.utils.formatEther(balance), "POL");

  // ========================================
  // 1. ÈÉ®ÁΩ≤ÂÆåÊï¥Áâà ConditionalTokens
  // ========================================
  console.log("\n" + "=".repeat(70));
  console.log("üì¶ Ê≠•È™§ 1: ÈÉ®ÁΩ≤ FullConditionalTokens");
  console.log("=".repeat(70));

  const FullCTF = await ethers.getContractFactory("FullConditionalTokens");
  console.log("\n‚è≥ Ê≠£Âú®ÈÉ®ÁΩ≤...");
  
  const fullCtf = await FullCTF.deploy();
  await fullCtf.deployed();

  console.log("‚úÖ FullConditionalTokens Â∑≤ÈÉ®ÁΩ≤");
  console.log("   Âú∞ÂùÄ:", fullCtf.address);
  console.log("   ÈÉ®ÁΩ≤‰∫§Êòì:", fullCtf.deployTransaction.hash);

  // ========================================
  // 2. ÈÉ®ÁΩ≤ CTFExchange (‰ΩøÁî®Êñ∞ÁöÑ CTF)
  // ========================================
  console.log("\n" + "=".repeat(70));
  console.log("üì¶ Ê≠•È™§ 2: ÈÉ®ÁΩ≤ CTFExchange");
  console.log("=".repeat(70));

  // ‰ΩøÁî® Mock USDC ‰Ωú‰∏∫ÊäµÊäºÂìÅ
  const mockUsdcPath = path.join(__dirname, "../deployments/mock-usdc.json");
  const mockUsdcData = JSON.parse(fs.readFileSync(mockUsdcPath, "utf8"));
  const collateralToken = mockUsdcData.mockUSDC.address;

  const feeRecipient = deployer.address; // ÊâãÁª≠Ë¥πÊé•Êî∂Âú∞ÂùÄ

  console.log("\nÈÖçÁΩÆ:");
  console.log("  CTF Âú∞ÂùÄ:", fullCtf.address);
  console.log("  ÊäµÊäºÂìÅ:", collateralToken, "(Mock USDC)");
  console.log("  ÊâãÁª≠Ë¥πÊé•Êî∂:", feeRecipient);

  const CTFExchange = await ethers.getContractFactory("CTFExchange");
  console.log("\n‚è≥ Ê≠£Âú®ÈÉ®ÁΩ≤...");
  
  const exchange = await CTFExchange.deploy(fullCtf.address, collateralToken, feeRecipient);
  await exchange.deployed();

  console.log("‚úÖ CTFExchange Â∑≤ÈÉ®ÁΩ≤");
  console.log("   Âú∞ÂùÄ:", exchange.address);
  console.log("   ÈÉ®ÁΩ≤‰∫§Êòì:", exchange.deployTransaction.hash);

  // ========================================
  // 3. È™åËØÅÈÉ®ÁΩ≤
  // ========================================
  console.log("\n" + "=".repeat(70));
  console.log("‚úÖ Ê≠•È™§ 3: È™åËØÅÈÉ®ÁΩ≤");
  console.log("=".repeat(70));

  const ctfAddress = await exchange.ctf();
  const collateral = await exchange.collateral();
  const paused = await exchange.paused();

  console.log("\nÈ™åËØÅÁªìÊûú:");
  console.log("  CTF Âú∞ÂùÄ:", ctfAddress, ctfAddress === fullCtf.address ? "‚úÖ" : "‚ùå");
  console.log("  ÊäµÊäºÂìÅ:", collateral, collateral === collateralToken ? "‚úÖ" : "‚ùå");
  console.log("  ÊöÇÂÅúÁä∂ÊÄÅ:", paused ? "‚ö†Ô∏è ÊòØ" : "‚úÖ Âê¶");

  // ========================================
  // 4. ‰øùÂ≠òÈÉ®ÁΩ≤‰ø°ÊÅØ
  // ========================================
  console.log("\n" + "=".repeat(70));
  console.log("üíæ Ê≠•È™§ 4: ‰øùÂ≠òÈÉ®ÁΩ≤‰ø°ÊÅØ");
  console.log("=".repeat(70));

  const deploymentData = {
    network: "amoy",
    chainId: 80002,
    deployer: deployer.address,
    version: "full-polymarket-v1",
    contracts: {
      fullConditionalTokens: {
        address: fullCtf.address,
        deployTx: fullCtf.deployTransaction.hash,
        version: "full-erc1155"
      },
      ctfExchange: {
        address: exchange.address,
        deployTx: exchange.deployTransaction.hash,
        version: "polymarket-orderbook"
      },
      collateral: {
        address: collateralToken,
        symbol: "USDC",
        decimals: 6,
        type: "Mock"
      }
    },
    timestamp: new Date().toISOString(),
    balance: ethers.utils.formatEther(await deployer.getBalance()) + " POL",
    note: "ÂÆåÊï¥Áâà Polymarket Á≥ªÁªü - ÊîØÊåÅ Token Èì∏ÈÄ†ÂíåËÆ¢ÂçïËñÑ‰∫§Êòì"
  };

  const deploymentsDir = path.join(__dirname, "../deployments");
  if (!fs.existsSync(deploymentsDir)) {
    fs.mkdirSync(deploymentsDir);
  }

  const outputPath = path.join(deploymentsDir, "amoy-full-system.json");
  fs.writeFileSync(outputPath, JSON.stringify(deploymentData, null, 2));

  console.log("\n‚úÖ ÈÉ®ÁΩ≤‰ø°ÊÅØÂ∑≤‰øùÂ≠ò:", outputPath);

  // ========================================
  // ÊÄªÁªì
  // ========================================
  console.log("\n" + "=".repeat(70));
  console.log("üéâ ÈÉ®ÁΩ≤ÂÆåÊàêÊÄªÁªì");
  console.log("=".repeat(70));

  console.log("\nüìã ÈÉ®ÁΩ≤ÁöÑÂêàÁ∫¶:");
  console.log("  1. FullConditionalTokens:", fullCtf.address);
  console.log("     - ÊîØÊåÅ ERC1155 ‚úÖ");
  console.log("     - ÊîØÊåÅ splitPosition ‚úÖ");
  console.log("     - ÊîØÊåÅ redeemPositions ‚úÖ");
  console.log();
  console.log("  2. CTFExchange:", exchange.address);
  console.log("     - Âü∫‰∫é Polymarket Êû∂ÊûÑ ‚úÖ");
  console.log("     - EIP-712 ËÆ¢ÂçïÁ≠æÂêç ‚úÖ");
  console.log("     - Off-chain ÊíÆÂêà ‚úÖ");
  console.log();
  console.log("  3. ÊäµÊäºÂìÅ: Mock USDC");
  console.log("     - Âú∞ÂùÄ:", collateralToken);

  console.log("\nüîß ‰∏ã‰∏ÄÊ≠•:");
  console.log("  1. Êõ¥Êñ∞ TestUmaCTFAdapter ‰ΩøÁî®Êñ∞ÁöÑ CTF Âú∞ÂùÄ");
  console.log("  2. ÊµãËØïÂÆåÊï¥ÊµÅÁ®ã (Token Èì∏ÈÄ† + ËÆ¢Âçï‰∫§Êòì + ËµéÂõû)");
  console.log("  3. Êõ¥Êñ∞ÂâçÁ´ØÈÖçÁΩÆ");

  console.log("\nüí∞ Gas Ë¥πÁî®:");
  const finalBalance = await deployer.getBalance();
  const spent = balance.sub(finalBalance);
  console.log("  Ê∂àËÄó:", ethers.utils.formatEther(spent), "POL");
  console.log("  Ââ©‰Ωô:", ethers.utils.formatEther(finalBalance), "POL");

  console.log("\n" + "=".repeat(70) + "\n");
}

main()
  .then(() => process.exit(0))
  .catch((error) => {
    console.error("\n‚ùå ÈÉ®ÁΩ≤Â§±Ë¥•:", error.message);
    console.error(error);
    process.exit(1);
  });

