/**
 * Âè™ÈÉ®ÁΩ≤ CTFExchange
 * (FullConditionalTokens Â∑≤ÈÉ®ÁΩ≤: 0xb171BBc6b1476ee1b6aD4Ac2cA7ed4AfFdFa10a2)
 */

const hre = require("hardhat");
const { ethers } = require("hardhat");
const fs = require("fs");
const path = require("path");

async function main() {
  console.log("\n" + "=".repeat(70));
  console.log("üöÄ ÈÉ®ÁΩ≤ CTFExchange (ËÆ¢ÂçïËñÑ)");
  console.log("=".repeat(70));

  const [deployer] = await ethers.getSigners();
  console.log("\nüìç ÈÉ®ÁΩ≤Ë¥¶Êà∑:", deployer.address);
  console.log("üí∞ Ë¥¶Êà∑‰ΩôÈ¢ù:", ethers.utils.formatEther(await deployer.getBalance()), "POL");

  // Â∑≤ÈÉ®ÁΩ≤ÁöÑ FullConditionalTokens
  const fullCtfAddress = "0xb171BBc6b1476ee1b6aD4Ac2cA7ed4AfFdFa10a2";
  
  // Mock USDC
  const mockUsdcPath = path.join(__dirname, "../deployments/mock-usdc.json");
  const mockUsdcData = JSON.parse(fs.readFileSync(mockUsdcPath, "utf8"));
  const collateralToken = mockUsdcData.mockUSDC.address;
  
  // ÊâãÁª≠Ë¥πÊé•Êî∂Âú∞ÂùÄ
  const feeRecipient = deployer.address;

  console.log("\nÈÖçÁΩÆ:");
  console.log("  FullCTF:", fullCtfAddress);
  console.log("  ÊäµÊäºÂìÅ:", collateralToken, "(Mock USDC)");
  console.log("  ÊâãÁª≠Ë¥πÊé•Êî∂:", feeRecipient);

  // ÈÉ®ÁΩ≤ CTFExchange
  console.log("\n‚è≥ Ê≠£Âú®ÈÉ®ÁΩ≤ CTFExchange...");
  
  const CTFExchange = await ethers.getContractFactory("CTFExchange");
  const exchange = await CTFExchange.deploy(fullCtfAddress, collateralToken, feeRecipient);
  await exchange.deployed();

  console.log("\n‚úÖ CTFExchange Â∑≤ÈÉ®ÁΩ≤");
  console.log("   Âú∞ÂùÄ:", exchange.address);
  console.log("   ÈÉ®ÁΩ≤‰∫§Êòì:", exchange.deployTransaction.hash);

  // È™åËØÅ
  console.log("\nüîç È™åËØÅÈÉ®ÁΩ≤...");
  const ctfAddress = await exchange.ctf();
  const collateral = await exchange.collateral();
  const paused = await exchange.paused();
  const feeRecipientAddr = await exchange.feeRecipient();

  console.log("\nÈ™åËØÅÁªìÊûú:");
  console.log("  CTF:", ctfAddress === fullCtfAddress ? "‚úÖ" : "‚ùå");
  console.log("  ÊäµÊäºÂìÅ:", collateral === collateralToken ? "‚úÖ" : "‚ùå");
  console.log("  ÊâãÁª≠Ë¥πÊé•Êî∂:", feeRecipientAddr === feeRecipient ? "‚úÖ" : "‚ùå");
  console.log("  ÊöÇÂÅúÁä∂ÊÄÅ:", paused ? "‚ö†Ô∏è ÊòØ" : "‚úÖ Âê¶");

  // ‰øùÂ≠òÈÉ®ÁΩ≤‰ø°ÊÅØ
  console.log("\nüíæ ‰øùÂ≠òÈÉ®ÁΩ≤‰ø°ÊÅØ...");

  const deploymentData = {
    network: "amoy",
    chainId: 80002,
    deployer: deployer.address,
    version: "full-polymarket-v1",
    contracts: {
      fullConditionalTokens: {
        address: fullCtfAddress,
        deployTx: "0x3e6808a965a2b97fccf661c25c33f4052fa8c2c8514221b365b01b6fea5c0a94",
        version: "full-erc1155"
      },
      ctfExchange: {
        address: exchange.address,
        deployTx: exchange.deployTransaction.hash,
        version: "polymarket-orderbook-v2"
      },
      collateral: {
        address: collateralToken,
        symbol: "USDC",
        decimals: 6,
        type: "Mock"
      },
      config: {
        feeRecipient: feeRecipient,
        paused: paused
      }
    },
    timestamp: new Date().toISOString(),
    balance: ethers.utils.formatEther(await deployer.getBalance()) + " POL",
    note: "ÂÆåÊï¥Áâà Polymarket Á≥ªÁªü - ÊîØÊåÅ Token Èì∏ÈÄ†ÂíåËÆ¢ÂçïËñÑ‰∫§Êòì"
  };

  const deploymentsDir = path.join(__dirname, "../deployments");
  const outputPath = path.join(deploymentsDir, "amoy-full-system.json");
  fs.writeFileSync(outputPath, JSON.stringify(deploymentData, null, 2));

  console.log("‚úÖ Â∑≤‰øùÂ≠ò:", outputPath);

  // ÊÄªÁªì
  console.log("\n" + "=".repeat(70));
  console.log("üéâ ÈÉ®ÁΩ≤ÂÆåÊàê");
  console.log("=".repeat(70));

  console.log("\nüìã ÂÆåÊï¥Á≥ªÁªüÂêàÁ∫¶:");
  console.log("  1. FullConditionalTokens:", fullCtfAddress);
  console.log("     ‚úÖ ÊîØÊåÅ ERC1155");
  console.log("     ‚úÖ ÊîØÊåÅ splitPosition (Èì∏ÈÄ† Token)");
  console.log("     ‚úÖ ÊîØÊåÅ redeemPositions (ËµéÂõû)");
  console.log();
  console.log("  2. CTFExchange:", exchange.address);
  console.log("     ‚úÖ Polymarket ËÆ¢ÂçïËñÑ");
  console.log("     ‚úÖ EIP-712 Á≠æÂêç");
  console.log("     ‚úÖ ÊâãÁª≠Ë¥π:", feeRecipient.substring(0, 10) + "...");
  console.log();
  console.log("  3. Mock USDC:", collateralToken);

  console.log("\nüîß ‰∏ã‰∏ÄÊ≠•:");
  console.log("  1. ÊµãËØï Token Èì∏ÈÄ†:");
  console.log("     npx hardhat run scripts/test-split-position.js --network amoy");
  console.log();
  console.log("  2. ÊµãËØïËÆ¢ÂçïËñÑ‰∫§Êòì:");
  console.log("     npx hardhat run scripts/test-orderbook-trade.js --network amoy");

  console.log("\n" + "=".repeat(70) + "\n");
}

main()
  .then(() => process.exit(0))
  .catch((error) => {
    console.error("\n‚ùå ÈÉ®ÁΩ≤Â§±Ë¥•:", error.message);
    console.error(error);
    process.exit(1);
  });







