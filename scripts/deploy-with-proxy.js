/**
 * ‰ΩøÁî®‰ª£ÁêÜÈÉ®ÁΩ≤Âà∞MumbaiÊµãËØïÁΩë
 */
const hre = require("hardhat");
const fs = require('fs');
const path = require('path');
const { HttpsProxyAgent } = require('https-proxy-agent');

// ÈÖçÁΩÆ‰ª£ÁêÜ
const PROXY = process.env.HTTPS_PROXY || "http://127.0.0.1:7890";
const UMA_ORACLE_MUMBAI = "0x263351499f82C107e540B01F0Ca959843e22464a";

// ÈÖçÁΩÆÂÖ®Â±Ä‰ª£ÁêÜ
if (PROXY) {
  const agent = new HttpsProxyAgent(PROXY);
  global.agent = agent;
  console.log(`üîå ‰ΩøÁî®‰ª£ÁêÜ: ${PROXY}\n`);
}

async function main() {
  console.log("üöÄ ÂºÄÂßãÈÉ®ÁΩ≤Âà∞Polygon MumbaiÊµãËØïÁΩë\n");
  console.log("‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n");
  
  // Ëé∑ÂèñÈÉ®ÁΩ≤Ë¥¶Êà∑
  const [deployer] = await hre.ethers.getSigners();
  console.log("üë§ ÈÉ®ÁΩ≤Ë¥¶Êà∑:", deployer.address);
  
  // Ê£ÄÊü•‰ΩôÈ¢ù
  try {
    const balance = await deployer.getBalance();
    const balanceInPOL = hre.ethers.utils.formatEther(balance);
    console.log("üí∞ Ë¥¶Êà∑‰ΩôÈ¢ù:", balanceInPOL, "POL\n");
    
    if (balance.lt(hre.ethers.utils.parseEther("0.1"))) {
      console.log("‚ö†Ô∏è  ‰ΩôÈ¢ù‰∏çË∂≥ÔºÅÂª∫ËÆÆËá≥Â∞ëÊúâ0.5 POL");
      console.log("üìù ËØ∑ËÆøÈóÆÊ∞¥ÈæôÂ§¥Ëé∑ÂèñÊµãËØïÂ∏ÅÔºöhttps://mumbaifaucet.com/\n");
      return;
    }
  } catch (error) {
    console.log("‚ö†Ô∏è  Êó†Ê≥ïËé∑Âèñ‰ΩôÈ¢ùÔºåÂèØËÉΩÊòØÁΩëÁªúËøûÊé•ÈóÆÈ¢ò");
    console.log("ÈîôËØØ:", error.message);
    console.log("\nËØ∑Ê£ÄÊü•:");
    console.log("1. VPNÊòØÂê¶Ê≠£Âú®ËøêË°å");
    console.log("2. ‰ª£ÁêÜÁ´ØÂè£ÊòØÂê¶Ê≠£Á°ÆÔºà7890Ôºâ");
    console.log("3. Alchemy APIÂØÜÈí•ÊòØÂê¶Ê≠£Á°Æ\n");
    return;
  }
  
  console.log("‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n");
  
  // ========== 1. ÈÉ®ÁΩ≤ConditionalTokens ==========
  console.log("üìù Ê≠•È™§1ÔºöÈÉ®ÁΩ≤ConditionalTokensÂêàÁ∫¶...\n");
  
  const CTF = await hre.ethers.getContractFactory("ConditionalTokens");
  console.log("   Ê≠£Âú®ÈÉ®ÁΩ≤...");
  
  try {
    const ctf = await CTF.deploy();
    await ctf.deployed();
    
    console.log("   ‚úÖ ConditionalTokensÂ∑≤ÈÉ®ÁΩ≤");
    console.log("   üìç Âú∞ÂùÄ:", ctf.address);
    console.log("   üîó Êü•Áúã:", `https://mumbai.polygonscan.com/address/${ctf.address}\n`);
    
    // Á≠âÂæÖÂá†‰∏™Âå∫ÂùóÁ°ÆËÆ§
    console.log("   ‚è≥ Á≠âÂæÖÂå∫ÂùóÁ°ÆËÆ§...");
    await ctf.deployTransaction.wait(3);
    console.log("   ‚úÖ Â∑≤Á°ÆËÆ§\n");
    
    console.log("‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n");
    
    // ========== 2. ÈÉ®ÁΩ≤UmaCTFAdapter ==========
    console.log("üìù Ê≠•È™§2ÔºöÈÉ®ÁΩ≤UmaCTFAdapterÂêàÁ∫¶...\n");
    console.log("   ‰ΩøÁî®UMA Oracle:", UMA_ORACLE_MUMBAI);
    
    const Adapter = await hre.ethers.getContractFactory("UmaCTFAdapter");
    console.log("   Ê≠£Âú®ÈÉ®ÁΩ≤...");
    const adapter = await Adapter.deploy(ctf.address, UMA_ORACLE_MUMBAI);
    await adapter.deployed();
    
    console.log("   ‚úÖ UmaCTFAdapterÂ∑≤ÈÉ®ÁΩ≤");
    console.log("   üìç Âú∞ÂùÄ:", adapter.address);
    console.log("   üîó Êü•Áúã:", `https://mumbai.polygonscan.com/address/${adapter.address}\n`);
    
    // Á≠âÂæÖÂá†‰∏™Âå∫ÂùóÁ°ÆËÆ§
    console.log("   ‚è≥ Á≠âÂæÖÂå∫ÂùóÁ°ÆËÆ§...");
    await adapter.deployTransaction.wait(3);
    console.log("   ‚úÖ Â∑≤Á°ÆËÆ§\n");
    
    console.log("‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n");
    
    // ========== 3. ‰øùÂ≠òÈÉ®ÁΩ≤‰ø°ÊÅØ ==========
    console.log("üìù Ê≠•È™§3Ôºö‰øùÂ≠òÈÉ®ÁΩ≤‰ø°ÊÅØ...\n");
    
    const balance = await deployer.getBalance();
    const deployment = {
      network: "mumbai",
      chainId: 80001,
      deployer: deployer.address,
      contracts: {
        conditionalTokens: {
          address: ctf.address,
          deployTx: ctf.deployTransaction.hash,
          blockNumber: ctf.deployTransaction.blockNumber
        },
        umaCTFAdapter: {
          address: adapter.address,
          deployTx: adapter.deployTransaction.hash,
          blockNumber: adapter.deployTransaction.blockNumber
        },
        umaOracle: UMA_ORACLE_MUMBAI
      },
      timestamp: new Date().toISOString(),
      balance: hre.ethers.utils.formatEther(balance) + " POL"
    };
    
    // Á°Æ‰øùdeploymentsÁõÆÂΩïÂ≠òÂú®
    const deploymentsDir = path.join(__dirname, '..', 'deployments');
    if (!fs.existsSync(deploymentsDir)) {
      fs.mkdirSync(deploymentsDir, { recursive: true });
    }
    
    // ‰øùÂ≠òÈÉ®ÁΩ≤‰ø°ÊÅØ
    const deploymentPath = path.join(deploymentsDir, 'mumbai.json');
    fs.writeFileSync(deploymentPath, JSON.stringify(deployment, null, 2));
    
    console.log("   ‚úÖ ÈÉ®ÁΩ≤‰ø°ÊÅØÂ∑≤‰øùÂ≠òÂà∞:", deploymentPath);
    console.log("\n‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n");
    
    // ========== 4. ÊòæÁ§∫ÊëòË¶Å ==========
    console.log("üéâ ÈÉ®ÁΩ≤ÂÆåÊàêÔºÅ\n");
    console.log("üìã ÈÉ®ÁΩ≤ÊëòË¶Å:\n");
    console.log(JSON.stringify(deployment, null, 2));
    
    console.log("\n‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n");
    
    // ========== 5. ‰∏ã‰∏ÄÊ≠•ÊèêÁ§∫ ==========
    console.log("üéØ ‰∏ã‰∏ÄÊ≠•Êìç‰Ωú:\n");
    console.log("1. È™åËØÅÂêàÁ∫¶ÔºàÂèØÈÄâÔºâ:");
    console.log(`   npx hardhat verify --network mumbai ${ctf.address}`);
    console.log(`   npx hardhat verify --network mumbai ${adapter.address} ${ctf.address} ${UMA_ORACLE_MUMBAI}\n`);
    
    console.log("2. ÂàõÂª∫ÊµãËØïÂ∏ÇÂú∫:");
    console.log(`   npx hardhat run scripts/create-test-market.js --network mumbai\n`);
    
    console.log("3. Âú®ÊµèËßàÂô®Êü•Áúã:");
    console.log(`   CTF: https://mumbai.polygonscan.com/address/${ctf.address}`);
    console.log(`   Adapter: https://mumbai.polygonscan.com/address/${adapter.address}\n`);
    
    console.log("‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n");
    console.log("‚úÖ ÈÉ®ÁΩ≤ÊàêÂäüÂÆåÊàêÔºÅ");
    
  } catch (error) {
    console.error("\n‚ùå ÈÉ®ÁΩ≤Â§±Ë¥•:", error.message);
    console.error("\nËØ¶ÁªÜÈîôËØØ‰ø°ÊÅØ:");
    console.error(error);
    
    console.log("\nüí° ÂèØËÉΩÁöÑËß£ÂÜ≥ÊñπÊ°à:");
    console.log("1. Ê£ÄÊü•VPNÊòØÂê¶Ê≠£Â∏∏ËøêË°å");
    console.log("2. Á°ÆËÆ§‰ª£ÁêÜÁ´ØÂè£ÊòØÂê¶Ê≠£Á°ÆÔºà7890Ôºâ");
    console.log("3. È™åËØÅAlchemy APIÂØÜÈí•");
    console.log("4. Ê£ÄÊü•Èí±ÂåÖÊòØÂê¶ÊúâË∂≥Â§üÁöÑPOL");
    
    process.exit(1);
  }
}

main()
  .then(() => process.exit(0))
  .catch((error) => {
    console.error("\n‚ùå ÈÉ®ÁΩ≤Â§±Ë¥•:", error.message);
    console.error(error);
    process.exit(1);
  });










